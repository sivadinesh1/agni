{"ast":null,"code":"import * as moment from 'moment';\nimport { timer } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic-native/geolocation/ngx\";\nimport * as i2 from \"@ionic-native/native-geocoder/ngx\";\nimport * as i3 from \"src/app/services/common-api.service\";\nimport * as i4 from \"@ionic/angular\";\nimport * as i5 from \"@angular/common\";\n\nfunction Tab1Page_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 4);\n    i0.ɵɵelementStart(2, \"div\", 5);\n    i0.ɵɵtext(3, \" AGNIHOTRA \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 5);\n    i0.ɵɵtext(5, \" TIMER \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 6);\n    i0.ɵɵtext(7, \" FREE DAILY AGNIHOTRA TIME GUIDE \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 7);\n    i0.ɵɵelement(9, \"img\", 8);\n    i0.ɵɵelementStart(10, \"div\");\n    i0.ɵɵtext(11, \"Detecting your location...\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction Tab1Page_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵelement(2, \"img\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.locality, \" \");\n  }\n}\n\nfunction Tab1Page_div_3_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\");\n    i0.ɵɵtext(2, \"START MORNING AGNIHOTRA YAGYA AT (SUNRISE)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\");\n    i0.ɵɵtext(6, \"TIME TO SUNRISE\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r3.nextsunrise);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r3.counterTimersMins, \"m : \", ctx_r3.counterTimersSecs, \"s\");\n  }\n}\n\nfunction Tab1Page_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵelementStart(1, \"div\");\n    i0.ɵɵelementStart(2, \"div\", 11);\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵelementStart(4, \"div\");\n    i0.ɵɵelementStart(5, \"span\", 12);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\");\n    i0.ɵɵelementStart(8, \"span\", 13);\n    i0.ɵɵtext(9, \" TODAY \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 14);\n    i0.ɵɵelementStart(11, \"div\", 15);\n    i0.ɵɵelementStart(12, \"span\", 12);\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"span\", 16);\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"div\", 13);\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"div\", 17);\n    i0.ɵɵtemplate(19, Tab1Page_div_3_div_19_Template, 9, 3, \"div\", 1);\n    i0.ɵɵtext(20, \" Middle \");\n    i0.ɵɵelementStart(21, \"p\");\n    i0.ɵɵtext(22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"p\");\n    i0.ɵɵtext(24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"ion-button\", 18);\n    i0.ɵɵlistener(\"click\", function Tab1Page_div_3_Template_ion_button_click_25_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.whereAmI();\n    });\n    i0.ɵɵtext(26, \"Where am I?\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"div\");\n    i0.ɵɵtext(28, \"NEXT YAGYA TIME(TODAY EVENTINT)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.todayDate, \" \");\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.now, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.nowA, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" TIME IN \", ctx_r2.locality, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.sunsetPrayer === \"over\" && ctx_r2.sunsetPrayer === \"over\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Time to Sunset: \", ctx_r2.timetoSunset, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Time to Sunrise: \", ctx_r2.timetoSunrise, \"\");\n  }\n}\n\nexport let Tab1Page = /*#__PURE__*/(() => {\n  class Tab1Page {\n    constructor(geolocation, nativeGeocoder, commonApiService, cdr) {\n      this.geolocation = geolocation;\n      this.nativeGeocoder = nativeGeocoder;\n      this.commonApiService = commonApiService;\n      this.cdr = cdr;\n      this.everySecond = timer(0, 1000);\n      this.sunriseCopyTxt = 'Sooryaya swaha sooryaya idam na mama Prajapataye swaha prajapataye idam na mama';\n      this.sunsetCopyTxt = 'agnaye swahaagnaye idam na mama prajapataye swaha prajapataye idam na mama';\n      this.locationdetected = false;\n      this.options = {\n        useLocale: true,\n        maxResults: 5\n      }; // inits\n\n      this.sunsetPrayer = 'notover';\n      this.sunrisePrayer = 'notover';\n      this.locationdetected = false;\n      this.todayDate = moment().format('D MMM YYYY');\n      this.now = moment().format('h:mm:ss');\n      this.nowA = moment().format('A');\n      this.today = moment().format('YYYY-MM-DD'); //2021-05-06 - format\n    }\n\n    ngOnInit() {\n      // Current Time counter\n      this.subscription = this.everySecond.subscribe(seconds => {\n        this.currentTime = moment();\n        this.cdr.detectChanges();\n      });\n    }\n\n    ionViewWillEnter() {\n      // call this method on init\n      this.whereAmI();\n    }\n\n    whereAmI() {\n      console.log('dinesh sss ');\n      this.geolocation.getCurrentPosition({\n        timeout: 10000,\n        enableHighAccuracy: true\n      }).then(resp => {\n        this.lat = resp.coords.latitude;\n        this.lng = resp.coords.longitude;\n        console.log('dinesh latitude ' + resp.coords.latitude);\n        console.log('dinesh longitude ' + resp.coords.longitude);\n        this.cdr.detectChanges();\n        this.getGeoDecoder(resp.coords.latitude, resp.coords.longitude);\n\n        if (this.sunsetPrayer === 'over' && this.sunrisePrayer === 'over' && this.locationdetected) {\n          // Todays Sunrise & Sunset is over so populate tomorrows sunrise timings & set flags\n          this.tomorrowSunsetSunrise();\n        }\n      }).catch(error => {\n        console.log('Error getting location', error);\n      }); // const watch = this.geolocation.watchPosition();\n      // watch.subscribe((data) => {\n      // });\n      // this.nativeGeocoder\n      //   .forwardGeocode('Berlin', this.options)\n      //   .then((result: NativeGeocoderResult[]) =>\n      //     console.log(\n      //       'The coordinates are latitude=' +\n      //         result[0].latitude +\n      //         ' and longitude=' +\n      //         result[0].longitude\n      //     )\n      //   )\n      //   .catch((error: any) => console.log(error));\n    } // get locality details based on lat & lng\n\n\n    getGeoDecoder(lat, lng) {\n      this.nativeGeocoder.reverseGeocode(lat, lng, this.options).then(result => {\n        this.locality = result[0].locality;\n        this.locationdetected = true;\n        this.cdr.detectChanges();\n        this.getSunriseSunset(lat, lng, this.today);\n      }).catch(error => console.log(error));\n    }\n\n    getSunriseSunset(lat, lng, when) {\n      this.commonApiService.getSunriseSunsetAPI(lat, lng, when).subscribe(data => {\n        console.log('dinesh ' + JSON.stringify(data));\n        this.sunrise = data.results.sunrise;\n        this.sunset = data.results.sunset;\n        this.sunrise = moment(data.results.sunrise).format('MMMM Do YYYY, h:mm:ss a');\n        this.sunset = moment(data.results.sunset).format('MMMM Do YYYY, h:mm:ss a');\n        this.timetoSunset = moment(data.results.sunset).fromNow();\n        this.timetoSunrise = moment(data.results.sunrise).fromNow();\n        const duration = moment.duration(moment().diff(moment(data.results.sunrise)));\n        const hours = duration.hours(); //hours instead of asHours\n\n        const minutes = duration.minutes(); //minutes instead of asMinutes\n\n        const seconds = duration.seconds();\n        console.log('dinesh hrs: ' + hours);\n        console.log('dinesh min : ' + minutes);\n        console.log('dinesh SSs : ' + seconds); // hasSunrisedToday\n\n        console.log('dinesh $$ ' + this.timetoSunrise);\n        console.log('dinesh ** ' + this.timetoSunset); // find if sunrise is over or not\n\n        if (this.timetoSunrise.indexOf('ago') > 0) {\n          console.log('dinesh .. sunrise already over ');\n          this.sunrisePrayer = 'over';\n        } else if (this.timetoSunrise.indexOf('in') > 0) {\n          console.log('dinesh .. sunrise not yet over ');\n          this.sunrisePrayer = 'notover';\n        }\n\n        console.log('dinesh !! ' + this.timetoSunset.indexOf('in')); // find if sunset is over or not\n\n        if (this.timetoSunset.indexOf('ago') !== -1) {\n          console.log('dinesh .. timetoSunset already over ');\n          this.sunsetPrayer = 'over';\n        } else if (this.timetoSunset.indexOf('in') !== -1) {\n          console.log('dinesh .. timetoSunset not yet over ');\n          this.sunsetPrayer = 'notover';\n          this.subscription = this.everySecond.subscribe(secondscounter => {\n            const duration1 = moment.duration(moment().diff(moment(data.results.sunset))); //const hours = duration1.hours(); //hours instead of asHours\n\n            this.counterTimersMins = duration1.minutes(); //minutes instead of asMinutes\n\n            this.counterTimersSecs = duration1.seconds();\n\n            if (this.counterTimersSecs < 11 && this.counterTimersMins === 0) {\n              this.getready = true;\n            } else {\n              this.getready = false;\n            } // let s = moment(data.results.sunset) - moment();\n\n\n            this.counterTimer = moment().format('h:mm:ss a');\n            this.cdr.markForCheck();\n          });\n        }\n\n        this.cdr.detectChanges();\n      });\n    }\n\n    tomorrowSunsetSunrise() {\n      const tomorrow = moment().add(1, 'days').format('yyyy-mm-dd');\n      this.commonApiService.getSunriseSunsetAPI(this.lat, this.lng, tomorrow).subscribe(data => {\n        console.log('dinesh ' + JSON.stringify(data));\n        this.nextsunrise = data.results.sunrise;\n        this.nextsunset = data.results.sunset;\n      });\n    }\n\n  }\n\n  Tab1Page.ɵfac = function Tab1Page_Factory(t) {\n    return new (t || Tab1Page)(i0.ɵɵdirectiveInject(i1.Geolocation), i0.ɵɵdirectiveInject(i2.NativeGeocoder), i0.ɵɵdirectiveInject(i3.CommonApiService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  Tab1Page.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: Tab1Page,\n    selectors: [[\"app-tab1\"]],\n    decls: 4,\n    vars: 4,\n    consts: [[3, \"fullscreen\"], [4, \"ngIf\"], [\"style\", \"\\n      display: grid;\\n      padding: 1rem;\\n      border-bottom: 1px solid rgb(201, 201, 201);\\n      text-align: center;\\n    \", 4, \"ngIf\"], [\"style\", \"display: grid; grid-template-rows: 1fr 2fr 2fr; height: 100vh\", 4, \"ngIf\"], [2, \"display\", \"grid\", \"justify-content\", \"center\", \"align-content\", \"center\", \"height\", \"100vh\"], [2, \"color\", \"#ca9100\", \"font-size\", \"48px\", \"text-align\", \"center\", \"font-weight\", \"400\", \"line-height\", \"42px\"], [2, \"color\", \"#999999\", \"font-size\", \"16px\", \"text-align\", \"center\"], [2, \"padding\", \"2rem\", \"text-align\", \"center\"], [\"src\", \"/assets/maps-and-flags.svg\", \"alt\", \"\", \"srcset\", \"\", \"width\", \"24px\"], [2, \"display\", \"grid\", \"padding\", \"1rem\", \"border-bottom\", \"1px solid rgb(201, 201, 201)\", \"text-align\", \"center\"], [2, \"display\", \"grid\", \"grid-template-rows\", \"1fr 2fr 2fr\", \"height\", \"100vh\"], [2, \"display\", \"grid\", \"grid-template-columns\", \"1fr 1fr\", \"padding\", \"1rem\"], [2, \"font-weight\", \"400\", \"font-size\", \"24px\", \"color\", \"#535353\"], [2, \"color\", \"#999999\", \"font-size\", \"16px\"], [2, \"text-align\", \"right\"], [2, \"font-size\", \"24px\"], [2, \"font-weight\", \"600\", \"font-size\", \"24px\", \"color\", \"#535353\"], [2, \"background-color\", \"antiquewhite\"], [3, \"click\"]],\n    template: function Tab1Page_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-content\", 0);\n        i0.ɵɵtemplate(1, Tab1Page_div_1_Template, 12, 0, \"div\", 1);\n        i0.ɵɵtemplate(2, Tab1Page_div_2_Template, 5, 1, \"div\", 2);\n        i0.ɵɵtemplate(3, Tab1Page_div_3_Template, 29, 7, \"div\", 3);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"fullscreen\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.locationdetected);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.locationdetected);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.locationdetected);\n      }\n    },\n    directives: [i4.IonContent, i5.NgIf, i4.IonButton],\n    styles: [\"\"],\n    changeDetection: 0\n  });\n  return Tab1Page;\n})();","map":null,"metadata":{},"sourceType":"module"}